<?xml version="1.0" encoding="UTF-8"?>
<!--
  All content copyright (c) 2003-2008 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved.
-->
<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">

  <servers>
    <server host="%i" name="sample"/>
    <update-check>
      <enabled>true</enabled>
    </update-check>
  </servers>

  <system>
    <configuration-model>development</configuration-model>
  </system>

  <clients>
    <logs>%(user.home)/terracotta/client-logs/scala/actors/%D</logs>
    
    <!-- 
        Import the Terracotta Integration Module (TIM) for Scala Actor clustering.
        Change the path to point to your Maven repository.
    -->
    <modules>
      <repository>file:///Users/jonas/.m2/repository</repository>
      <module name="clustered-scala-actors-2.6.1" version="2.6.0.SNAPSHOT"/>
    </modules>
  </clients>

  <application>
    <dso>     
      <!--
          Add locks to the 'var' holding the state in the actor. 
          You have to add two different locks, for read and write 
          operations. Scala generates two different methods, the getter
          has the same name as the 'var' while the getter has the name 
          suffixed by '_$eq'. 
      -->
      <locks>
        <named-lock>
          <lock-name>Cart_items_write</lock-name>
          <lock-level>write</lock-level>
          <method-expression>* samples.Cart.items_$eq(..)</method-expression>
        </named-lock>
        <named-lock>
          <lock-name>Cart_items_read</lock-name>
          <lock-level>read</lock-level>
          <method-expression>* samples.Cart.items()</method-expression>
        </named-lock>
        
        <!--
            Needed for trying out the Cart factory and custom scope
        -->
        <!--
        <named-lock>
          <lock-name>Cart_newInstance</lock-name>
          <lock-level>write</lock-level>
          <method-expression>* samples.Cart$.newInstance(..)</method-expression>
        </named-lock>
        -->
      </locks>
      
      <!-- 
           Add patterns matching your application specific classes and all other 
           classes that might be either held on to by the actor or sent in a message.
      --> 
      <instrumented-classes>
        <include>
          <class-expression>samples.*</class-expression>
        </include>
        <include>
          <class-expression>scala.List</class-expression>
        </include>
        <include>
          <class-expression>scala.$colon$colon</class-expression>
        </include>
        <include>
          <class-expression>scala.Nil$</class-expression>
        </include>
        
        <!--
            Needed for trying out the Cart factory and custom scope
        -->
        <!--
        <include>
        	<class-expression>scala.collection.mutable.HashMap</class-expression>
        </include>
  			<include>
        	<class-expression>scala.runtime.BoxedAnyArray</class-expression>
        </include>
        <include>
        	<class-expression>scala.runtime.BoxedArray</class-expression>
        </include>
    		<include>
        	<class-expression>scala.collection.mutable.DefaultEntry</class-expression>
        </include>
        -->
      </instrumented-classes>

      <!--
          Needed for trying out the Cart factory and custom scope
      -->
      <!--
      <roots>
        <root>
          <field-name>samples.Cart$.instances</field-name>
        </root>
      </roots>
      -->
    </dso>
  </application>
</tc:tc-config>
